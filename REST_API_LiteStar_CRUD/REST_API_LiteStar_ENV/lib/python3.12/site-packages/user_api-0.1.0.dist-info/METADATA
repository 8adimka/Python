Metadata-Version: 2.3
Name: user-api
Version: 0.1.0
Summary: REST API for user management with Litestar
Author: Your Name
Author-email: your.email@example.com
Requires-Python: >=3.12,<4.0
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Requires-Dist: advanced-alchemy (>=0.7.0,<0.8.0)
Requires-Dist: alembic (>=1.13.1,<2.0.0)
Requires-Dist: asyncpg (>=0.29.0,<0.30.0)
Requires-Dist: litestar[sqlalchemy,standard] (>=2.1.0,<3.0.0)
Requires-Dist: pydantic (>=2.6.0,<3.0.0)
Requires-Dist: sqlalchemy (>=2.0.25,<3.0.0)
Requires-Dist: uvicorn (>=0.25.0,<0.26.0)
Description-Content-Type: text/markdown

REST API для управления пользователями на LiteStar
Полноценное приложение с CRUD-операциями для пользователей, используя LiteStar и PostgreSQL. 
1. Полная структура проекта:

user_api/
├── .env
├── .gitignore
├── docker-compose.yml
├── pyproject.toml
├── README.md
└── src/
    ├── __init__.py
    ├── db/
    │   ├── __init__.py
    │   ├── models.py
    │   └── session.py
    ├── domain/
    │   ├── __init__.py
    │   └── users/
    │       ├── __init__.py
    │       ├── controllers.py
    │       ├── dtos.py
    │       ├── models.py
    │       ├── repository.py
    │       └── service.py
    ├── lib/
    │   ├── __init__.py
    │   └── settings.py
    └── server.py

2. Запустите приложения:

bash
docker-compose up -d
Приложение будет доступно по адресу http://localhost:8000/api/docs
(Swagger UI)

3. Проверка работоспособности
Создание пользователя:

POST /users

Body:

json
{
  "name": "John",
  "surname": "Doe",
  "password": "securepassword123"
}
Получение списка пользователей:

GET /users

Получение одного пользователя:

GET /users/1

Обновление пользователя:

PUT /users/1

Body:

json
{
  "name": "John Updated"
}
Удаление пользователя:

DELETE /users/1

4. Особенности реализации
Использован Advanced-SQLAlchemy для работы с базой данных

Реализована полная валидация входных данных

Настроен Swagger UI для документации API

Использованы современные практики Python (типизация, async/await)

Приложение готово к развертыванию
