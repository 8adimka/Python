import copy

some_dict = {'green':'go', 'yellow':'go faster', 'red':['stop', 'smile']}

print (some_dict)

some_dict_copy1 = some_dict.copy()
some_dict_copy1['red'][1] = 'not smile'

print(some_dict)

# some_dict_copy2 = some_dict[:] -> –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!

red_copy = some_dict['red']
red_copy[0] = 'gogogo'

print(red_copy)

print(some_dict)

def buggy1 (a, res = []):
    res.append(a)
    print(res)
    return res

buggy1('to_list')
r = buggy1('5')

print(r)

def buggy2 (a, res = [1,'in_list']):
    res.append(a)
    print(res)
    return res

buggy2('to_list')
r = buggy2('5')

print(r)

def not_buggy (arg, result=None):
    if result is None:
        result = []
    result.append(arg)
    print (result)
    return result

not_buggy('to_list')
not_buggy(1)
not_buggy(2)
r = not_buggy('5')

print(r)


class Buggy ():
    def __init__ (self, res=[1, '2']):
        self.res = res

    def add_some (self, a):
        self.res.append(a)
        print(self.res)
        return self.res

class Not_buggy ():
    def __init__ (self, res=None):
        self.res = res if res is not None else []

    def add_some (self, a):
        self.res.append(a)
        print(self.res)
        return self.res

not_bug = Not_buggy()
not_bug.add_some('to_list')
not_bug.add_some('to_list2')
not_bug.add_some('3')
r=not_bug.add_some(4)

print (not_bug.res)
print ('_________________________________________________')


from functools import wraps

def my_decorator (arg):
    def real_decorator (func):
        @wraps(func)  # üéØ –∫–æ–ø–∏—Ä—É–µ—Ç –∏–º—è, –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥, –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –∏ —Ç.–¥.
        def wrapper (*args, **kwargs):
            print ('–î–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏')
            func(*args, **kwargs)
            print(f'–ü–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—á–∞—Ç–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ - {arg}')
        return wrapper
    return real_decorator

@my_decorator("üéâ –≠—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞!")
def some_func (a,b):
    print(f'–í–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏,\n–ø–µ—á–∞—Ç–∞–µ–º {a} –∏ {b}')

some_func('–ê—Ä–≥—É–º–µ–Ω—Ç—ã', 5)


print ('_________________________________________________')

def real_decorator (func):
    @wraps(func)  # üéØ –∫–æ–ø–∏—Ä—É–µ—Ç –∏–º—è, –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥, –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –∏ —Ç.–¥.
    def wrapper (*args, **kwargs):
        print ('–î–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏')
        func(*args, **kwargs)
        print(f'–ü–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏!')
    return wrapper


@real_decorator
def some_func (a,b=5):
    print(f'–í–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏,\n–ø–µ—á–∞—Ç–∞–µ–º {a} –∏ {b}')

some_func('–ê—Ä–≥—É–º–µ–Ω—Ç—ã')

def repeat(n=5):
    def decorator(func):
        @wraps(func)  # üéØ –∫–æ–ø–∏—Ä—É–µ—Ç –∏–º—è, –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥, –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –∏ —Ç.–¥.
        def wrapper(*args, **kwargs):
            for i in range(n):
                func(*args, **kwargs)
        return wrapper
    return decorator

@repeat(2)
def hello(name):
    print(f"Hello, {name}!")

hello("Vadim")

def hello(name='Julia'):
    print(f"Hello, {name}!")

repeat(1)(hello)()
repeat(3)(hello)("Max")

# üîÑ –†–∞–∑–æ–≤–∞—è –æ–±—ë—Ä—Ç–∫–∞ ‚Äî –≤—ã–∑–æ–≤–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –≤—Ä—É—á–Ω—É—é:
wrapped_hello = repeat(3)(hello)  # —Å–Ω–∞—á–∞–ª–∞ repeat(3) ‚Üí –≤–µ—Ä–Ω—ë—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä ‚Üí –≤—ã–∑—ã–≤–∞–µ–º —Å hello

# –≤—ã–∑–æ–≤
wrapped_hello()

