import time
from typing import List, Dict

from db_manager import DBManager
from api_client import HeadHunterAPI
from config import DATABASE_CONFIG, COMPANIES
from dto.models import Employer, Vacancy

def check_db_connection() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with DBManager(DATABASE_CONFIG) as db:
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        return False

def collect_and_analyze_data():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö"""
    api = HeadHunterAPI()
    
    try:
        with DBManager(DATABASE_CONFIG) as db:
            print("\nüîÑ –ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
            db.create_tables()
            
            # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
            for company in COMPANIES:
                process_company(api, db, company)
                time.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            
            print("\nüéâ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!")
            show_statistics(db)
            
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

def process_company(api: HeadHunterAPI, db: DBManager, company: Dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏"""
    print(f"\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏: {company['name']}...")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç Employer
    employer = api.get_employer(company['id'])
    if not employer:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {company['name']}")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
    try:
        db.insert_employer(employer)
        print(f"‚úÖ –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å {employer.name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–π
        vacancies_raw_data = api.get_vacancies(company['id'])
        vacancies_count = 0

        for vacancy_data in vacancies_raw_data:
            try:
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—Ä–ø–ª–∞—Ç–µ
                salary_data = vacancy_data.get('salary') or {}
                
                vacancy = Vacancy(
                    id=int(vacancy_data['id']),
                    employer_id=int(vacancy_data['employer']['id']),
                    name=vacancy_data['name'],
                    salary_from=salary_data.get('from'),
                    salary_to=salary_data.get('to'),
                    salary_currency=salary_data.get('currency'),
                    url=vacancy_data['alternate_url']
                )
                db.insert_vacancy(vacancy)
                vacancies_count += 1
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏ {vacancy_data.get('id', 'unknown')}: {str(e)}")
                continue
        
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {vacancies_count} –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è {company['name']}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–ø–∞–Ω–∏–∏ {company['name']}: {e}")

def show_statistics(db: DBManager):
    """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ–±—Ä–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º"""
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    
    # –ö–æ–º–ø–∞–Ω–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π
    print("\n–ö–æ–º–ø–∞–Ω–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π:")
    try:
        companies_stats = db.get_companies_and_vacancies_count()
        for company in companies_stats:
            print(f"- {company['name']}: {company['vacancies_count']}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º: {e}")
    
    # –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞
    try:
        avg_salary = db.get_avg_salary()
        print(f"\n–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {avg_salary:.2f} RUB")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ä–µ–¥–Ω–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã: {e}")
    
    # –í–∞–∫–∞–Ω—Å–∏–∏ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π
    print("\nüîù –í–∞–∫–∞–Ω—Å–∏–∏ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π:")
    try:
        high_salary_vacancies = db.get_vacancies_with_higher_salary()
        for vacancy in high_salary_vacancies:
            salary_from = vacancy['salary_from'] or "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            salary_to = vacancy['salary_to'] or "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            currency = vacancy['salary_currency'] or ""
            print(f"- {vacancy['company_name']}: {vacancy['vacancy_name']} (–æ—Ç {salary_from} –¥–æ {salary_to} {currency})")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π —Å –≤—ã—Å–æ–∫–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π: {e}")
    
    # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
    keyword = "python"
    print(f"\nüîé –í–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{keyword}':")
    try:
        keyword_vacancies = db.get_vacancies_with_keyword(keyword)
        for vacancy in keyword_vacancies:
            print(f"- {vacancy['company_name']}: {vacancy['vacancy_name']}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: {e}")

if __name__ == "__main__":
    if not check_db_connection():
        exit(1)
    
    collect_and_analyze_data()
    